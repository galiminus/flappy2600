------- FILE atari5.asm LEVEL 1 PASS 2
      1  10000 ????
      2  10000 ????				       processor	6502
------- FILE vcs.h LEVEL 2 PASS 2
      0  10000 ????				       include	"vcs.h"
      1  10000 ????						; VCS.H
      2  10000 ????						; Version 1.05, 13/November/2003
      3  10000 ????
      4  10000 ????		00 69	    VERSION_VCS =	105
      5  10000 ????
      6  10000 ????						; THIS IS A PRELIMINARY RELEASE OF *THE* "STANDARD" VCS.H
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; PLEASE DO *NOT* REDISTRIBUTE THIS FILE!
      9  10000 ????						;
     10  10000 ????						; This file defines hardware registers and memory mapping for the
     11  10000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  10000 ????						; available at at http://www.atari2600.org/dasm
     14  10000 ????						;
     15  10000 ????						; Many thanks to the original author(s) of this file, and to everyone who has
     16  10000 ????						; contributed to understanding the Atari 2600.  If you take issue with the
     17  10000 ????						; contents, or naming of registers, please write to me (atari2600@taswegian.com)
     18  10000 ????						; with your views.  Please contribute, if you think you can improve this
     19  10000 ????						; file!
     20  10000 ????						;
     21  10000 ????						; Latest Revisions...
     22  10000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     23  10000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     24  10000 ????						;			    This will allow conditional code to verify VCS.H being
     25  10000 ????						;			    used for code assembly.
     26  10000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     27  10000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     28  10000 ????						;			 mirrored reading/writing differences.	This is more a 
     29  10000 ????						;			 readability issue, and binary compatibility with disassembled
     30  10000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     31  10000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     32  10000 ????						;			 which was broken by the use of segments in this file, as
     33  10000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     34  10000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     35  10000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     36  10000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     37  10000 ????						;						   it is safe to leave it undefined, and the base address will
     38  10000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     39  10000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     40  10000 ????						;			  - register definitions are now generated through assignment
     41  10000 ????						;			    in uninitialised segments.	This allows a changeable base
     42  10000 ????						;			    address architecture.
     43  10000 ????						; 1.0	22/MAR/2003		Initial release
     44  10000 ????
     45  10000 ????
     46  10000 ????						;-------------------------------------------------------------------------------
     47  10000 ????
     48  10000 ????						; TIA_BASE_ADDRESS
     49  10000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     50  10000 ????						; Normally 0, the base address should (externally, before including this file)
     51  10000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     52  10000 ????						; The reason is that this bankswitching scheme treats any access to locations
     53  10000 ????						; < $40 as a bankswitch.
     54  10000 ????
     55  10000 ????			   -	       IFNCONST	TIA_BASE_ADDRESS
     56  10000 ????			   -TIA_BASE_ADDRESS =	0
     57  10000 ????				       ENDIF
     58  10000 ????
     59  10000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     60  10000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     61  10000 ????						; *OR* by declaring the label before including this file, eg:
     62  10000 ????						; TIA_BASE_ADDRESS = $40
     63  10000 ????						;   include "vcs.h"
     64  10000 ????
     65  10000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     66  10000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     67  10000 ????						; for the mirrored ROM hardware registers.
     68  10000 ????
     69  10000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     70  10000 ????						; using the -D command-line switch, as required.  If the addresses are not defined, 
     71  10000 ????						; they defaut to the TIA_BASE_ADDRESS.
     72  10000 ????
     73  10000 ????			   -	       IFNCONST	TIA_BASE_READ_ADDRESS
     74  10000 ????			   -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     75  10000 ????				       ENDIF
     76  10000 ????
     77  10000 ????			   -	       IFNCONST	TIA_BASE_WRITE_ADDRESS
     78  10000 ????			   -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     79  10000 ????				       ENDIF
     80  10000 ????
     81  10000 ????						;-------------------------------------------------------------------------------
     82  10000 ????
     83 U002d ????				      SEG.U	TIA_REGISTERS_WRITE
     84 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     85 U0000
     86 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     87 U0000
     88 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     89 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     90 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     91 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     92 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     93 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     94 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     95 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     96 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     97 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
     98 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
     99 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    100 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    101 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    102 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    103 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    104 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    105 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    106 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    107 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    108 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    109 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    110 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    111 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    112 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    113 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    114 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    115 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    116 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    117 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    118 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    119 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    120 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    121 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    122 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    123 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    124 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    125 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    126 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    127 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    128 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    129 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    130 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    131 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    132 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    133 U002d
    134 U002d							;-------------------------------------------------------------------------------
    135 U002d
    136 U000e ????				      SEG.U	TIA_REGISTERS_READ
    137 U0000					      ORG	TIA_BASE_READ_ADDRESS
    138 U0000
    139 U0000							;											bit 7	 bit 6
    140 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    141 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    142 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    143 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    144 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    145 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    146 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    147 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    148 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    149 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    150 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    151 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    152 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    153 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    154 U000e
    155 U000e							;-------------------------------------------------------------------------------
    156 U000e
    157 U0298 ????				      SEG.U	RIOT
    158 U0280					      ORG	$280
    159 U0280
    160 U0280							; RIOT MEMORY MAP
    161 U0280
    162 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    163 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    164 U0281
    165 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    166 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    167 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    168 U0284		       00	   INTIM      ds	1	; $284		Timer output
    169 U0285
    170 U0285		       00	   TIMINT     ds	1	; $285
    171 U0286
    172 U0286							; Unused/undefined registers ($285-$294)
    173 U0286
    174 U0286		       00		      ds	1	; $286
    175 U0287		       00		      ds	1	; $287
    176 U0288		       00		      ds	1	; $288
    177 U0289		       00		      ds	1	; $289
    178 U028a		       00		      ds	1	; $28A
    179 U028b		       00		      ds	1	; $28B
    180 U028c		       00		      ds	1	; $28C
    181 U028d		       00		      ds	1	; $28D
    182 U028e		       00		      ds	1	; $28E
    183 U028f		       00		      ds	1	; $28F
    184 U0290		       00		      ds	1	; $290
    185 U0291		       00		      ds	1	; $291
    186 U0292		       00		      ds	1	; $292
    187 U0293		       00		      ds	1	; $293
    188 U0294
    189 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    190 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    191 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    192 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    193 U0298
    194 U0298							;-------------------------------------------------------------------------------
    195 U0298							; The following required for back-compatibility with code which does not use
    196 U0298							; segments.
    197 U0298
    198  10000 ????				       SEG
    199  10000 ????
    200  10000 ????						; EOF
------- FILE atari5.asm
------- FILE macro.h LEVEL 2 PASS 2
      0  10000 ????				       include	"macro.h"
      1  10000 ????						; MACRO.H
      2  10000 ????						; Version 1.06, 3/SEPTEMBER/2004
      3  10000 ????
      4  10000 ????		00 6a	    VERSION_MACRO =	106
      5  10000 ????
      6  10000 ????						;
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; PLEASE DO *NOT* REDISTRIBUTE MODIFIED VERSIONS OF THIS FILE!
      9  10000 ????						;
     10  10000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     11  10000 ????						; It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  10000 ????						; available at at http://www.atari2600.org/dasm
     14  10000 ????						;
     15  10000 ????						; Many thanks to the people who have contributed.  If you take issue with the
     16  10000 ????						; contents, or would like to add something, please write to me
     17  10000 ????						; (atari2600@taswegian.com) with your contribution.
     18  10000 ????						;
     19  10000 ????						; Latest Revisions...
     20  10000 ????						;
     21  10000 ????						; 1.06  03/SEP/2004	 - nice revision of VERTICAL_BLANK (Edwin Blink)
     22  10000 ????						; 1.05  14/NOV/2003	 - Added VERSION_MACRO equate (which will reflect 100x version #)
     23  10000 ????						;			   This will allow conditional code to verify MACRO.H being
     24  10000 ????						;			   used for code assembly.
     25  10000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     26  10000 ????						;
     27  10000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     28  10000 ????						;
     29  10000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     30  10000 ????						;			   (standardised macro for vertical synch code)
     31  10000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added. 
     32  10000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     33  10000 ????						; 1.0	22/MAR/2003		Initial release
     34  10000 ????
     35  10000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage, 
     36  10000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     37  10000 ????						;   If you do not allow illegal opcode usage, you must include this file 
     38  10000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     39  10000 ????						;   registers and require them to be defined first).
     40  10000 ????
     41  10000 ????						; Available macros...
     42  10000 ????						;   SLEEP n		 - sleep for n cycles
     43  10000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     44  10000 ????						;   CLEAN_START	 - set machine to known state on startup
     45  10000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     46  10000 ????
     47  10000 ????						;-------------------------------------------------------------------------------
     48  10000 ????						; SLEEP duration
     49  10000 ????						; Original author: Thomas Jentzsch
     50  10000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     51  10000 ????						; useful for code where precise timing is required.
     52  10000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     53  10000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     54  10000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     55  10000 ????
     56  10000 ????				       MAC	sleep
     57  10000 ????			    .CYCLES    SET	{1}
     58  10000 ????
     59  10000 ????				       IF	.CYCLES < 2
     60  10000 ????				       ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     61  10000 ????				       ERR
     62  10000 ????				       ENDIF
     63  10000 ????
     64  10000 ????				       IF	.CYCLES & 1
     65  10000 ????				       IFNCONST	NO_ILLEGAL_OPCODES
     66  10000 ????				       nop	0
     67  10000 ????				       ELSE
     68  10000 ????				       bit	VSYNC
     69  10000 ????				       ENDIF
     70  10000 ????			    .CYCLES    SET	.CYCLES - 3
     71  10000 ????				       ENDIF
     72  10000 ????
     73  10000 ????				       REPEAT	.CYCLES / 2
     74  10000 ????				       nop
     75  10000 ????				       REPEND
     76  10000 ????				       ENDM		;usage: SLEEP n (n>1)
     77  10000 ????
     78  10000 ????						;-------------------------------------------------------------------------------
     79  10000 ????						; VERTICAL_SYNC
     80  10000 ????						; revised version by Edwin Blink -- saves bytes!
     81  10000 ????						; Inserts the code required for a proper 3 scanline vertical sync sequence
     82  10000 ????						; Note: Alters the accumulator
     83  10000 ????
     84  10000 ????						; OUT: A = 0
     85  10000 ????
     86  10000 ????				       MAC	vertical_sync
     87  10000 ????				       lda	#%1110	; each '1' bits generate a VSYNC ON line (bits 1..3)
     88  10000 ????			    .VSLP1     sta	WSYNC	; 1st '0' bit resets Vsync, 2nd '0' bit exit loop
     89  10000 ????				       sta	VSYNC
     90  10000 ????				       lsr
     91  10000 ????				       bne	.VSLP1	; branch until VYSNC has been reset
     92  10000 ????				       ENDM
     93  10000 ????
     94  10000 ????						;-------------------------------------------------------------------------------
     95  10000 ????						; CLEAN_START
     96  10000 ????						; Original author: Andrew Davie
     97  10000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
     98  10000 ????						; Sets stack pointer to $FF, and all registers to 0
     99  10000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    100  10000 ????						; Use as very first section of code on boot (ie: at reset)
    101  10000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    102  10000 ????
    103  10000 ????				       MAC	clean_start
    104  10000 ????				       sei
    105  10000 ????				       cld
    106  10000 ????
    107  10000 ????				       ldx	#0
    108  10000 ????				       txa
    109  10000 ????				       tay
    110  10000 ????			    .CLEAR_STACK dex
    111  10000 ????				       txs
    112  10000 ????				       pha
    113  10000 ????				       bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    114  10000 ????
    115  10000 ????				       ENDM
    116  10000 ????
    117  10000 ????						;-------------------------------------------------------
    118  10000 ????						; SET_POINTER
    119  10000 ????						; Original author: Manuel Rotschkar
    120  10000 ????						;
    121  10000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    122  10000 ????						;
    123  10000 ????						; Usage: SET_POINTER pointer, address
    124  10000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    125  10000 ????						;
    126  10000 ????						; Note: Alters the accumulator, NZ flags
    127  10000 ????						; IN 1: 2 byte RAM location reserved for pointer
    128  10000 ????						; IN 2: absolute address
    129  10000 ????
    130  10000 ????				       MAC	set_pointer
    131  10000 ????			    .POINTER   SET	{1}
    132  10000 ????			    .ADDRESS   SET	{2}
    133  10000 ????
    134  10000 ????				       LDA	#<.ADDRESS	; Get Lowbyte of Address
    135  10000 ????				       STA	.POINTER	; Store in pointer
    136  10000 ????				       LDA	#>.ADDRESS	; Get Hibyte of Address
    137  10000 ????				       STA	.POINTER+1	; Store in pointer+1
    138  10000 ????
    139  10000 ????				       ENDM
    140  10000 ????
    141  10000 ????						;-------------------------------------------------------
    142  10000 ????						; BOUNDARY byte#
    143  10000 ????						; Original author: Denis Debro (borrowed from Bob Smith / Thomas)
    144  10000 ????						;
    145  10000 ????						; Push data to a certain position inside a page and keep count of how
    146  10000 ????						; many free bytes the programmer will have.
    147  10000 ????						;
    148  10000 ????						; eg: BOUNDARY 5    ; position at byte #5 in page
    149  10000 ????
    150  10000 ????			    .FREE_BYTES SET	0
    151  10000 ????				       MAC	boundary
    152  10000 ????				       REPEAT	256
    153  10000 ????				       IF	<. % {1} = 0
    154  10000 ????				       MEXIT
    155  10000 ????				       ELSE
    156  10000 ????			    .FREE_BYTES SET	.FREE_BYTES + 1
    157  10000 ????				       .byte	$00
    158  10000 ????				       ENDIF
    159  10000 ????				       REPEND
    160  10000 ????				       ENDM
    161  10000 ????
    162  10000 ????
    163  10000 ????						; EOF
------- FILE atari5.asm
      5  10000 ????
      6  10000 ????		00 08	    UPPER_PLAYFIELD_HEIGHT =	8
      7  10000 ????		00 08	    LOWER_PLAYFIELD_HEIGHT =	8
      8  10000 ????		00 b0	    PLAYAREA_HEIGHT =	192 - UPPER_PLAYFIELD_HEIGHT - LOWER_PLAYFIELD_HEIGHT
      9  10000 ????		00 b8	    INITIAL_TREE_POSITION =	192 - 8
     10  10000 ????		00 01	    TREE_DELAY =	1
     11  10000 ????		00 08	    UPPER_PLAYFIELD_LIMIT =	UPPER_PLAYFIELD_HEIGHT
     12  10000 ????		00 b8	    PLAYAREA_LIMIT =	UPPER_PLAYFIELD_LIMIT + PLAYAREA_HEIGHT
     13  10000 ????		00 c0	    LOWER_PLAYFIELD_LIMIT =	PLAYAREA_LIMIT + LOWER_PLAYFIELD_HEIGHT
     14  10000 ????		00 28	    FLAP_X     =	40
     15  10000 ????		00 9e	    BACKGROUND_COLOR =	$9e
     16  10000 ????		00 14	    TREE_COLOR =	$14
     17  10000 ????		00 9e	    BORDER_COLOR =	$9e
     18 U008b ????				      SEG.U	vars
     19 U0080					      ORG	$80
     20 U0080
     21 U0080		       00	   FLAP_Y     ds	1
     22 U0081		       00	   TREE_X     ds	1
     23 U0082		       00	   WALL_DEC_COUNT ds	1
     24 U0083		       00	   TREE_SHAPE ds	1
     25 U0084		       00	   HOLE_START ds	1
     26 U0085		       00	   HOLE_END   ds	1
     27 U0086		       00	   FLAP_FRAME_COUNTER ds	1
     28 U0087		       00 00	   FLAP_CURRENT_FRAME ds	2
     29 U0089		       00	   RND	      ds	1
     30 U008a		       00	   HOLE_SIZE  ds	1
     31 U008b
     32  10000 ????				       SEG
     33  f000					      ORG	$F000
     34  f000
     35  f000				   Reset
      0  f000					      CLEAN_START
      1  f000		       78		      sei
      2  f001		       d8		      cld
      3  f002
      4  f002		       a2 00		      ldx	#0
      5  f004		       8a		      txa
      6  f005		       a8		      tay
      7  f006		       ca	   .CLEAR_STACK dex
      8  f007		       9a		      txs
      9  f008		       48		      pha
     10  f009		       d0 fb		      bne	.CLEAR_STACK
     11  f00b
     37  f00b
     38  f00b							; Once-only initialization...
     39  f00b		       a9 9e		      lda	#BACKGROUND_COLOR
     40  f00d		       85 09		      sta	COLUBK	; set the background color
     41  f00f
     42  f00f		       a9 14		      lda	#$14
     43  f011		       85 06		      sta	COLUP0	; tree color
     44  f013
     45  f013		       a9 78		      lda	#120
     46  f015		       85 80		      sta	FLAP_Y	; set flappy initial y position
     47  f017
     48  f017		       a9 1e		      lda	#$1e
     49  f019		       85 07		      sta	COLUP1	; flappy color
     50  f01b
     51  f01b		       a9 b8		      lda	#INITIAL_TREE_POSITION
     52  f01d		       85 81		      sta	TREE_X	; set tree initial x position
     53  f01f
     54  f01f		       a9 01		      lda	#TREE_DELAY
     55  f021		       85 82		      sta	WALL_DEC_COUNT
     56  f023
     57  f023		       a9 ef		      lda	#%11101111
     58  f025		       85 83		      sta	TREE_SHAPE
     59  f027
     60  f027		       a9 05		      lda	#%00000101
     61  f029		       85 0a		      sta	CTRLPF
     62  f02b
     63  f02b		       a9 a6		      lda	#192 - 8 - 8 - 10
     64  f02d		       85 84		      sta	HOLE_START
     65  f02f
     66  f02f		       a9 0a		      lda	#10
     67  f031		       85 85		      sta	HOLE_END
     68  f033
     69  f033		       a9 40		      lda	#64
     70  f035		       85 86		      sta	FLAP_FRAME_COUNTER
     71  f037
     72  f037		       a9 cd		      lda	#<FlapFrame1
     73  f039		       85 87		      sta	FLAP_CURRENT_FRAME
     74  f03b		       a9 f1		      lda	#>FlapFrame1
     75  f03d		       85 88		      sta	FLAP_CURRENT_FRAME + 1
     76  f03f
     77  f03f		       a9 11		      lda	#17	; rnd seed
     78  f041		       85 89		      sta	RND
     79  f043
     80  f043		       a9 32		      lda	#50
     81  f045		       85 8a		      sta	HOLE_SIZE	; default hole size
     82  f047
     83  f047				   MainLoop
      0  f047					      VERTICAL_SYNC
      1  f047		       a9 0e		      lda	#%1110
      2  f049		       85 02	   .VSLP1     sta	WSYNC
      3  f04b		       85 00		      sta	VSYNC
      4  f04d		       4a		      lsr
      5  f04e		       d0 f9		      bne	.VSLP1
     85  f050		       a9 2b		      lda	#43
     86  f052		       8d 96 02 	      sta	TIM64T	; we set this timer to around the time it takes to complete the vblank
     87  f055
     88  f055							; very bad collision check
     89  f055		       a5 81		      lda	TREE_X
     90  f057		       18		      clc
     91  f058		       e9 08		      sbc	#8
     92  f05a		       c9 28		      cmp	#FLAP_X
     93  f05c		       b0 21		      bcs	NoCollisionWithTree
     94  f05e
     95  f05e		       18		      clc
     96  f05f		       69 08		      adc	#8
     97  f061		       c9 28		      cmp	#FLAP_X
     98  f063		       b0 1a		      bcs	NoCollisionWithTree
     99  f065
    100  f065		       a5 80		      lda	FLAP_Y
    101  f067		       18		      clc
    102  f068		       e9 02		      sbc	#2	; allow one pixel cleareance
    103  f06a		       18		      clc
    104  f06b		       c5 84		      cmp	HOLE_START
    105  f06d		       90 03		      bcc	NoTopCollision
    106  f06f		       4c 93 f0 	      jmp	Collision
    107  f072
    108  f072				   NoTopCollision
    109  f072		       a5 80		      lda	FLAP_Y
    110  f074		       18		      clc
    111  f075		       e9 08		      sbc	#8
    112  f077		       18		      clc
    113  f078		       c5 85		      cmp	HOLE_END
    114  f07a		       b0 03		      bcs	NoDownCollision
    115  f07c		       4c 93 f0 	      jmp	Collision
    116  f07f
    117  f07f				   NoCollisionWithTree
    118  f07f				   NoDownCollision
    119  f07f		       a5 80		      lda	FLAP_Y
    120  f081		       18		      clc
    121  f082		       c9 b0		      cmp	192 - #UPPER_PLAYFIELD_HEIGHT - #LOWER_PLAYFIELD_HEIGHT
    122  f084		       90 03		      bcc	NoCeilingCollision
    123  f086		       4c 93 f0 	      jmp	Collision
    124  f089
    125  f089				   NoCeilingCollision
    126  f089		       a5 80		      lda	FLAP_Y
    127  f08b		       18		      clc
    128  f08c		       c9 08		      cmp	#8
    129  f08e		       b0 0a		      bcs	NoCollision
    130  f090		       4c 93 f0 	      jmp	Collision
    131  f093
    132  f093				   Collision
    133  f093		       a9 48		      lda	#$48	; change to RED
    134  f095		       85 09		      sta	COLUBK
    135  f097		       4c 00 f0 	      jmp	Reset
    136  f09a
    137  f09a				   NoCollision
    138  f09a
    139  f09a		       a5 81		      lda	TREE_X
    140  f09c		       a2 00		      ldx	#0
    141  f09e		       20 b5 f1 	      jsr	WaitForSprite
    142  f0a1
    143  f0a1		       a9 28		      lda	#FLAP_X	; constant
    144  f0a3		       a2 01		      ldx	#1
    145  f0a5		       20 b5 f1 	      jsr	WaitForSprite
    146  f0a8
    147  f0a8							; is controller Down?
    148  f0a8		       a9 10		      lda	#%00010000
    149  f0aa		       2c 80 02 	      bit	SWCHA
    150  f0ad		       d0 06		      bne	DoneMoveUp
    151  f0af
    152  f0af					      REPEAT	1	; control speed
    153  f0af		       e6 80		      inc	FLAP_Y	; y is backward
    154  f0b1		       e6 80		      inc	FLAP_Y	; y is backward
    155  f0b3		       e6 80		      inc	FLAP_Y	; y is backward
    156  f0b5					      REPEND
    157  f0b5				   DoneMoveUp
    158  f0b5
    159  f0b5							;   update RND
    160  f0b5		       a5 89		      lda	RND
    161  f0b7		       0a		      asl
    162  f0b8		       0a		      asl
    163  f0b9		       18		      clc
    164  f0ba		       65 89		      adc	RND
    165  f0bc		       18		      clc
    166  f0bd		       69 11		      adc	#17	; RND * 5 + 17
    167  f0bf		       85 89		      sta	RND
    168  f0c1
    169  f0c1							; check flap frame
    170  f0c1							; we increment on every frame and if the mask give 0 = frame0, 1 = frame1
    171  f0c1		       a5 86		      lda	FLAP_FRAME_COUNTER
    172  f0c3		       18		      clc
    173  f0c4		       c9 20		      cmp	#32
    174  f0c6		       b0 13		      bcs	SetFlapFrame1
    175  f0c8
    176  f0c8		       a9 c5		      lda	#<FlapFrame0
    177  f0ca		       85 87		      sta	FLAP_CURRENT_FRAME
    178  f0cc		       a9 f1		      lda	#>FlapFrame0
    179  f0ce		       85 88		      sta	FLAP_CURRENT_FRAME + 1
    180  f0d0
    181  f0d0		       a5 86		      lda	FLAP_FRAME_COUNTER
    182  f0d2		       d0 0f		      bne	DoneFlapFrame
    183  f0d4							; reset FLAP_FRAME_COUNTER
    184  f0d4		       a9 40		      lda	#64
    185  f0d6		       85 86		      sta	FLAP_FRAME_COUNTER
    186  f0d8
    187  f0d8		       4c e3 f0 	      jmp	DoneFlapFrame
    188  f0db
    189  f0db				   SetFlapFrame1
    190  f0db		       a9 cd		      lda	#<FlapFrame1
    191  f0dd		       85 87		      sta	FLAP_CURRENT_FRAME
    192  f0df		       a9 f1		      lda	#>FlapFrame1
    193  f0e1		       85 88		      sta	FLAP_CURRENT_FRAME + 1
    194  f0e3
    195  f0e3				   DoneFlapFrame
    196  f0e3		       c6 86		      dec	FLAP_FRAME_COUNTER
    197  f0e5
    198  f0e5							; lda FLAP_FRAME_COUNTER
    199  f0e5							; and #%00000001
    200  f0e5							; bne SkipDropAltitude
    201  f0e5		       c6 80		      dec	FLAP_Y
    202  f0e7				   SkipDropAltitude
    203  f0e7
    204  f0e7							; check if we need to move the tree
    205  f0e7		       a4 82		      ldy	WALL_DEC_COUNT
    206  f0e9		       88		      dey
    207  f0ea		       84 82		      sty	WALL_DEC_COUNT
    208  f0ec		       d0 2e		      bne	SkipTreeMove
    209  f0ee
    210  f0ee		       a9 01		      lda	#TREE_DELAY
    211  f0f0		       85 82		      sta	WALL_DEC_COUNT	; reset tree wall move counter
    212  f0f2
    213  f0f2							; move the tree
    214  f0f2		       a5 81		      lda	TREE_X
    215  f0f4		       38		      sec
    216  f0f5		       e9 01		      sbc	#1	; change to adjust the speed, beware of underflow!
    217  f0f7		       85 81		      sta	TREE_X
    218  f0f9							; clc
    219  f0f9		       c9 18		      cmp	#24	; weird stuff here
    220  f0fb		       d0 1f		      bne	SkipTreeReset
    221  f0fd
    222  f0fd							; Reset tree to position
    223  f0fd		       a5 83		      lda	TREE_SHAPE
    224  f0ff		       0a		      asl
    225  f100		       69 00		      adc	#0
    226  f102		       85 83		      sta	TREE_SHAPE
    227  f104
    228  f104		       a9 b8		      lda	#INITIAL_TREE_POSITION
    229  f106		       85 81		      sta	TREE_X
    230  f108
    231  f108		       a5 89		      lda	RND
    232  f10a		       29 3e		      and	#%00111110	; get a value from 64 to 0
    233  f10c		       69 1e		      adc	#30
    234  f10e		       85 85		      sta	HOLE_END
    235  f110
    236  f110		       18		      clc
    237  f111		       65 8a		      adc	HOLE_SIZE
    238  f113		       85 84		      sta	HOLE_START
    239  f115
    240  f115							; ADD SPEED
    241  f115		       a5 8a		      lda	HOLE_SIZE
    242  f117		       18		      clc
    243  f118		       e9 01		      sbc	#1
    244  f11a		       85 8a		      sta	HOLE_SIZE	; weirdly dec seem to produce weird results :/
    245  f11c
    246  f11c				   SkipTreeReset
    247  f11c				   SkipTreeMove
    248  f11c
    249  f11c							; draw upper playfield boundary
    250  f11c		       a9 ff		      lda	#%11111111
    251  f11e		       85 0d		      sta	PF0
    252  f120		       85 0e		      sta	PF1
    253  f122		       85 0f		      sta	PF2
    254  f124
    255  f124		       a9 0e		      lda	#$0e
    256  f126		       85 08		      sta	COLUPF	; set the cloud playfield color
    257  f128
    258  f128				   WaitForVblankEnd
    259  f128		       ad 84 02 	      lda	INTIM
    260  f12b		       d0 fb		      bne	WaitForVblankEnd
    261  f12d
    262  f12d		       85 02		      sta	WSYNC
    263  f12f		       85 2a		      sta	HMOVE
    264  f131		       85 01		      sta	VBLANK
    265  f133
    266  f133							; BEGIN
    267  f133		       a2 08		      ldx	#UPPER_PLAYFIELD_HEIGHT
    268  f135				   DrawUpperPlayfield
    269  f135		       ca		      dex
    270  f136		       85 02		      sta	WSYNC
    271  f138		       d0 fb		      bne	DrawUpperPlayfield
    272  f13a							; END
    273  f13a
    274  f13a		       a9 00		      lda	#0
    275  f13c		       85 0f		      sta	PF2	;  disable middle part of playfield
    276  f13e
    277  f13e							; lda #$1e
    278  f13e		       a9 9e		      lda	#BORDER_COLOR
    279  f140		       85 08		      sta	COLUPF	; set the border playfield color
    280  f142
    281  f142		       a5 83		      lda	TREE_SHAPE
    282  f144		       85 1b		      sta	GRP0	; apply the sprite shape
    283  f146
    284  f146							; BEGIN
    285  f146		       a2 b0		      ldx	#PLAYAREA_HEIGHT	; reinint counter, save a line at the bottom to handle playfield transition
    286  f148				   Picture
    287  f148		       a9 f0		      lda	#%11110000
    288  f14a		       85 0d		      sta	PF0
    289  f14c		       a9 e0		      lda	#%11100000
    290  f14e		       85 0e		      sta	PF1
    291  f150
    292  f150							; handle the HOLE
    293  f150		       e4 84		      cpx	HOLE_START	; 2
    294  f152		       d0 07		      bne	SkipHoleStart	; 2
    295  f154		       a9 00		      lda	#0	; 2
    296  f156		       85 1b		      sta	GRP0	; 4
    297  f158		       4c 63 f1 	      jmp	SkipHoleEnd	; 3
    298  f15b
    299  f15b				   SkipHoleStart
    300  f15b		       e4 85		      cpx	HOLE_END	; 2
    301  f15d		       d0 04		      bne	SkipHoleEnd	; 2
    302  f15f		       a5 83		      lda	TREE_SHAPE	; 3
    303  f161		       85 1b		      sta	GRP0	; 3
    304  f163
    305  f163				   SkipHoleEnd
    306  f163		       a9 30		      lda	#%00110000
    307  f165		       85 0d		      sta	PF0
    308  f167		       a9 00		      lda	#%00000000
    309  f169		       85 0e		      sta	PF1
    310  f16b
    311  f16b		       85 02		      sta	WSYNC
    312  f16d		       ca		      dex
    313  f16e
    314  f16e		       a9 f0		      lda	#%11110000
    315  f170		       85 0d		      sta	PF0
    316  f172		       a9 e0		      lda	#%11100000
    317  f174		       85 0e		      sta	PF1
    318  f176
    319  f176		       8a		      txa
    320  f177		       38		      sec
    321  f178		       e5 80		      sbc	FLAP_Y
    322  f17a		       69 08		      adc	#8	; sprite height
    323  f17c		       90 08		      bcc	SkipFlap
    324  f17e
    325  f17e		       a8		      tay
    326  f17f		       b1 87		      lda	(FLAP_CURRENT_FRAME),y
    327  f181		       85 1c		      sta	GRP1
    328  f183		       4c 8a f1 	      jmp	SkipHideFlap
    329  f186
    330  f186
    331  f186				   SkipFlap
    332  f186		       a9 00		      lda	#0
    333  f188		       85 1c		      sta	GRP1
    334  f18a
    335  f18a				   SkipHideFlap
    336  f18a		       a9 30		      lda	#%00110000
    337  f18c		       85 0d		      sta	PF0
    338  f18e		       a9 00		      lda	#%00000000
    339  f190		       85 0e		      sta	PF1
    340  f192
    341  f192		       85 02		      sta	WSYNC
    342  f194		       ca		      dex
    343  f195
    344  f195		       d0 b1		      bne	Picture
    345  f197							; END
    346  f197
    347  f197							;BEGIN
    348  f197							; disable tree sprite
    349  f197		       a9 00		      lda	#$00
    350  f199		       85 1b		      sta	GRP0
    351  f19b
    352  f19b		       a9 c8		      lda	#$c8
    353  f19d		       85 08		      sta	COLUPF	; set the ground playfield color
    354  f19f
    355  f19f							; draw lower playfield boundary
    356  f19f		       a9 ff		      lda	#%11111111
    357  f1a1		       85 0d		      sta	PF0
    358  f1a3		       85 0e		      sta	PF1
    359  f1a5		       85 0f		      sta	PF2
    360  f1a7
    361  f1a7		       a2 25		      ldx	#LOWER_PLAYFIELD_HEIGHT + 29	; reinint counter
    362  f1a9				   DrawLowerPlayfield
    363  f1a9		       85 02		      sta	WSYNC
    364  f1ab		       ca		      dex
    365  f1ac		       d0 fb		      bne	DrawLowerPlayfield
    366  f1ae							; END
    367  f1ae
    368  f1ae							; Game logic comes here
    369  f1ae
    370  f1ae		       a9 42		      lda	#%01000010
    371  f1b0		       85 01		      sta	VBLANK	; end of screen - enter blanking
    372  f1b2
    373  f1b2		       4c 47 f0 	      jmp	MainLoop
    374  f1b5
    375  f1b5				   WaitForSprite
    376  f1b5		       85 02		      sta	WSYNC
    377  f1b7		       38		      sec		; 02	  Set the carry flag so no borrow will be applied during the division.
    378  f1b8				   Divideby15
    379  f1b8		       e9 0f		      sbc	#15	; 04	  Waste the necessary amount of time dividing X-pos by 15!
    380  f1ba		       b0 fc		      bcs	Divideby15	; 06/07  11/16/21/26/31/36/41/46/51/56/61/66
    381  f1bc		       a8		      tay
    382  f1bd		       b9 0f fd 	      lda	fineAdjustTable,y	; 13 -> Consume 5 cycles by guaranteeing we cross a page boundary
    383  f1c0		       95 20		      sta	HMP0,x
    384  f1c2		       95 10		      sta	RESP0,x	; 21/ 26/31/36/41/46/51/56/61/66/71 - Set the rough position.
    385  f1c4		       60		      rts
    386  f1c5
    387  f1c5				   FlapFrame0
    388  f1c5		       3c		      .byte.b	#%00111100	;$1E
    389  f1c6		       fe		      .byte.b	#%11111110	;$1E
    390  f1c7		       ff		      .byte.b	#%11111111	;$1E
    391  f1c8		       ff		      .byte.b	#%11111111	;$1E
    392  f1c9		       7a		      .byte.b	#%01111010	;$1E
    393  f1ca		       7e		      .byte.b	#%01111110	;$1E
    394  f1cb		       3c		      .byte.b	#%00111100	;$1E
    395  f1cc		       18		      .byte.b	#%00011000	;$1E
    396  f1cd
    397  f1cd				   FlapFrame1
    398  f1cd		       3c		      .byte.b	#%00111100	;$1E
    399  f1ce		       3e		      .byte.b	#%00111110	;$1E
    400  f1cf		       7f		      .byte.b	#%01111111	;$1E
    401  f1d0		       ff		      .byte.b	#%11111111	;$1E
    402  f1d1		       fa		      .byte.b	#%11111010	;$1E
    403  f1d2		       fe		      .byte.b	#%11111110	;$1E
    404  f1d3		       3c		      .byte.b	#%00111100	;$1E
    405  f1d4		       18		      .byte.b	#%00011000	;$1E
    406  f1d5
    407  fe00					      ORG	$FE00
    408  fe00				   fineAdjustBegin
    409  fe00		       70		      DC.B	%01110000	; Left 7
    410  fe01		       60		      DC.B	%01100000	; Left 6
    411  fe02		       50		      DC.B	%01010000	; Left 5
    412  fe03		       40		      DC.B	%01000000	; Left 4
    413  fe04		       30		      DC.B	%00110000	; Left 3
    414  fe05		       20		      DC.B	%00100000	; Left 2
    415  fe06		       10		      DC.B	%00010000	; Left 1
    416  fe07		       00		      DC.B	%00000000	; No movement.
    417  fe08		       f0		      DC.B	%11110000	; Right 1
    418  fe09		       e0		      DC.B	%11100000	; Right 2
    419  fe0a		       d0		      DC.B	%11010000	; Right 3
    420  fe0b		       c0		      DC.B	%11000000	; Right 4
    421  fe0c		       b0		      DC.B	%10110000	; Right 5
    422  fe0d		       a0		      DC.B	%10100000	; Right 6
    423  fe0e		       90		      DC.B	%10010000	; Right 7
    424  fe0f
    425  fe0f		       fd 0f	   fineAdjustTable EQU	fineAdjustBegin - %11110001	; NOTE: %11110001 = -15
    426  fe0f
    427  fffa					      ORG	$FFFA
    428  fffa				   InterruptVectors
    429  fffa		       00 f0		      .word.w	Reset	; NMI
    430  fffc		       00 f0		      .word.w	Reset	; RESET
    431  fffe		       00 f0		      .word.w	Reset	; IRQ
    432  10000
    433  10000					       END
